# importing the libraries;
import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

# import dataset;
df = pd.read_csv(r'C:\Users\WINDOWS 10\Documents\Datasets\global\Global YouTube Statistics.csv', encoding = 'latin-1')
print(df)
------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

# print top 5 rows;
df.head()
-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

df.info()
-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

# converting suscribers , video views and population, urban population in millions; 
df['Subscribers'] = (df['Subscribers'] / 1000000).round(2)
df['Video Views'] = (df['Video Views'] / 1000000).round(2)
df["Population"] = (df['Population'] / 1000000).round(2)
df['Urban Population'] = (df['Urban Population']/1000000).round(2)
df.tail()
---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

# checking of null values
df.isnull().sum()
---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

# handling missing values in dataset
NaNnumerical= df.select_dtypes(include=["float64","int64"] ).columns
NaNcategorical= df.select_dtypes(include=["object"]).columns
df[NaNnumerical]= df[NaNnumerical].fillna(0)
df[NaNcategorical]= df[NaNcategorical].fillna("Unknown")
-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

# analysis of value in statistical format;
describe_df=df.describe()
print(describe_df)
-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

# rename the column name ;
df.rename(columns={"Unemployment rate": "Unemployment rate(%)"}, inplace=True)
-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

# Display the modified DataFrame
df.head()
-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

# filter the rows where the videos views are not equal to 0;
df[df['Video Views']!=0]
----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

# creating new column in dataset named 'AvarageYearlyEarnings'
df['AverageYearlyEarnings'] = (df['Lowest Yearly Earnings'] + df['Highest Yearly Earnings'])/2
df['AverageYearlyEarnings'] = (df['AverageYearlyEarnings'] / 1000000).round(2)
df.head()
-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

# top countries having most subscribers
country_subscribers = df.groupby('Country')['Subscribers'].sum().sort_values(ascending=False).head(5)
plt.pie(country_subscribers, labels=country_subscribers.index, autopct='%1.1f%%',
        colors=['gold', 'lightskyblue', 'lightcoral', 'lightgreen', 'lightpink'])

plt.title('Country-wise Subscribers Distribution')
plt.show()
-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

# find the top 10 indian youtube subscribers;
indian_channels = df[df['Abbreviation'] == 'IN']
top_10_indian_channels = indian_channels.sort_values(by='Subscribers', ascending=False).head(10)
print(top_10_indian_channels[['Youtuber', 'Subscribers']])
import matplotlib.pyplot as plt
plt.figure(figsize=(10, 8))
plt.bar(top_10_indian_channels['Youtuber'], top_10_indian_channels['Subscribers'], color='blue')
plt.xlabel('YouTube Channels')
plt.ylabel('Subscribers (in millions)')
plt.title('Top 10 Indian YouTube Channels by Subscribers')
plt.xticks(rotation=45, ha='right')
plt.tight_layout()
plt.show()
-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

# category wise subscribers in percentage in horizontal bar chart;
import matplotlib.pyplot as plt
import seaborn as sns
category_subscribers = df.groupby('Category')['Subscribers'].sum()
total_subscribers = df['Subscribers'].sum()
percentage_subscribers = (category_subscribers / total_subscribers) * 100
percentage_subscribers = percentage_subscribers.reset_index()
plt.figure(figsize=(10, 6))
bar_plot = sns.barplot(x='Subscribers', y='Category', data=percentage_subscribers, color='skyblue')
for index, value in enumerate(percentage_subscribers['Subscribers']):
    bar_plot.text(value, index, f'{value:.2f}%', va='center')
plt.xlabel('Percentage of Subscribers')
plt.ylabel('Category')
plt.title('Category-wise Distribution of Subscribers')
plt.show()
--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

# Comaprision between India and USA with Entertainment and Music Category 
filtered_df = df[df['Category'].isin(['Entertainment', 'Music']) & df['Abbreviation'].isin(['IN', 'US'])]

india_entertainment = filtered_df[(filtered_df['Abbreviation'] == 'IN') & (filtered_df['Category'] == 'Entertainment')]
india_music = filtered_df[(filtered_df['Abbreviation'] == 'IN') & (filtered_df['Category'] == 'Music')]
us_entertainment = filtered_df[(filtered_df['Abbreviation'] == 'US') & (filtered_df['Category'] == 'Entertainment')]
us_music = filtered_df[(filtered_df['Abbreviation'] == 'US') & (filtered_df['Category'] == 'Music')]

def get_top_5(dataframe):
    return dataframe.nlargest(5, 'Subscribers')[['Youtuber', 'Subscribers', 'Video Views']]

top_5_india_entertainment = get_top_5(india_entertainment)
top_5_india_music = get_top_5(india_music)
top_5_us_entertainment = get_top_5(us_entertainment)
top_5_us_music = get_top_5(us_music)

fig, axes = plt.subplots(nrows=2, ncols=2, figsize=(10, 10))
def plot_pie(ax, labels, sizes, title):
    ax.pie(sizes, labels=labels, autopct='%1.1f%%', startangle=90)
    ax.axis('equal') 
    ax.set_title(title)

plot_pie(axes[0, 0], top_5_india_entertainment['Youtuber'], top_5_india_entertainment['Subscribers'], 'Top 5 Entertainment YouTubers (India)')
plot_pie(axes[0, 1], top_5_india_music['Youtuber'], top_5_india_music['Subscribers'], 'Top 5 Music YouTubers (India)')
plot_pie(axes[1, 0], top_5_us_entertainment['Youtuber'], top_5_us_entertainment['Subscribers'], 'Top 5 Entertainment YouTubers (US)')
plot_pie(axes[1, 1], top_5_us_music['Youtuber'], top_5_us_music['Subscribers'], 'Top 5 Music YouTubers (US)')

plt.tight_layout()
plt.show()
--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

# Top 10 youtubers by average yearly earnings:
import matplotlib.pyplot as plt


temp = df[['Youtuber', 'AverageYearlyEarnings']].sort_values(by='AverageYearlyEarnings', ascending=False).head(10)

plt.figure(figsize=(10, 6))
plt.bar(temp['Youtuber'], temp['AverageYearlyEarnings'], color='red')
plt.xlabel('Youtuber')
plt.ylabel('Average Yearly Earnings')
plt.title('Top 10 Youtubers by Average Yearly Earnings')
plt.xticks(rotation=45, ha='right')

# Labels
for index, value in enumerate(temp['AverageYearlyEarnings']):
    plt.text(index, value, f"${value:.2f}", ha='center', va='bottom')

plt.tight_layout()
plt.show()
----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

# Correlation between video views, Yearly Earning and Subscribers
df_corr = df[['AverageYearlyEarnings', 'Video Views', 'Uploads', 'Subscribers']]
corr = df_corr.corr()
sns.heatmap(corr, annot=True, linewidth=0.5, cmap='Reds')
plt.show()
----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

# Finding the top category
top_countries = df.groupby('Country')['Population'].max().sort_values(ascending=False).index.tolist()
print(f'Countries with Highest Population: {top_countries}')

plt.figure(figsize=(20, 8)) 
channel_type_counts_top5 = df[df['Country'].isin(top_countries)]['Channel Type'].value_counts().head(5)


plt.pie(channel_type_counts_top5, labels=channel_type_counts_top5.index, autopct='%1.1f%%', startangle=90, textprops={'fontsize': 14})
plt.title('Top 5 Channel Type Distribution in Countries by Population', fontsize=20)
plt.show()
---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

# Finding whichh country is earning most
top_countries = df.groupby('Country')['Highest Monthly Earnings'].max().sort_values(ascending=False).head(10)
plt.figure(figsize=(12, 8))
sns.barplot(x=top_countries.values, y=top_countries.index, palette='viridis')
plt.title('Top 10 Countries by Highest Monthly Earnings')
plt.show()
---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

# Video views as per channel category
plt.figure(figsize=(12, 6))
sns.barplot(x='Category', y='Video Views', data=df, ci=None)
plt.xticks(rotation=45)
plt.show()
---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

# Which category has most channels in India
india_data = df[df['Country'] == 'India']

top5_categories = india_data['Category'].value_counts().head(5)

plt.figure(figsize=(10, 6))
sns.barplot(x=top5_categories.index, y=top5_categories.values, palette='viridis')

plt.title('Top 5 Categories in India by Number of Channels')
plt.xlabel('Category')
plt.ylabel('Number of Channels')
plt.xticks(rotation=45, ha='right')
plt.tight_layout()

plt.show()
---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

# Subscribers and Video views Relation
plt.figure(figsize=(10, 6))
sns.regplot(x='Subscribers', y='Video Views', data=df, scatter_kws={'alpha':1}, line_kws={'color': 'red'})

plt.title('Subscriber vs. Video Views Relationship with Regression Line')
plt.xlabel('Number of Subscribers')
plt.ylabel('Number of Video Views')

plt.show()
---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
